import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class BubbleSort {
    public static void main(String[] args) {
        int arr[] = {3, 9, -1, 10, -2};

        // 测试一下冒泡排序的速度 ，给80000个数据测试
        int []arr1 = new int [80000];
        for (int i = 0; i < 80000; i++) {
            arr1[i] = (int) (Math.random()*800000); // 随机生成0-800000之间的数
        }

        Date date = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String datestr = simpleDateFormat.format(date);
        System.out.println("排序前的时间 =" + datestr);

        bubble(arr1);
        Date date1 = new Date();
        String datestr1 = simpleDateFormat.format(date1);
        System.out.println("排序前的时间 =" + datestr1);
        // 推导过程
        int temp = 0;
        // 第一趟排序， 就是将最大的数排在最后
        for (int i = 0; i < arr.length - 1 - 0; i++) {
            // 如果前面的数比后面的数大， 就交换
            if (arr[i] > arr[i + 1]) {
                temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
            }
        }
        // 一个一个往后比， 绝对能比出来一个最大的
        System.out.println("第一次排序后的数组");
        System.out.println(Arrays.toString(arr));


        for (int i = 0; i < arr.length - 1 - 1; i++) {
            // 如果前面的数比后面的数大， 就交换
            if (arr[i] > arr[i + 1]) {
                temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
            }
        }
        // 一个一个往后比， 绝对能比出来一个最大的
        System.out.println("第2次排序后的数组");
        System.out.println(Arrays.toString(arr));

        for (int i = 0; i < arr.length - 1 - 2; i++) {
            // 如果前面的数比后面的数大， 就交换
            if (arr[i] > arr[i + 1]) {
                temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
            }
        }
        // 一个一个往后比， 绝对能比出来一个最大的
        System.out.println("第3次排序后的数组");
        System.out.println(Arrays.toString(arr));


        for (int i = 0; i < arr.length - 1 - 3; i++) {
            // 如果前面的数比后面的数大， 就交换
            if (arr[i] > arr[i + 1]) {
                temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
            }
        }
        // 一个一个往后比， 绝对能比出来一个最大的
        System.out.println("第4次排序后的数组");
        System.out.println(Arrays.toString(arr));


        // 封装函数 并优化
        // 得出结论

        }
    public static void bubble(int[] arr){
  int temp = 0;
      boolean flag = false;

            for (int j = 0; j < arr.length - 1; j++) {
                for (int i = 0; i < arr.length - 1 - j; i++) {
                    // 如果前面的数比后面的数大， 就交换
                    if (arr[i] > arr[i + 1]) {
                        flag = true;
                        temp = arr[i];
                        arr[i] = arr[i + 1];
                        arr[i + 1] = temp;
                    }
                }
                // 一个一个往后比， 绝对能比出来一个最大的
             //   System.out.println("第" + (j + 1) + "次排序后的数组");
               // System.out.println(Arrays.toString(arr));

                if (!flag){
                    break;
                }else{
                  flag = false;  //!!!重置flag 方便下一次判断
                }
            }
        }

    }


